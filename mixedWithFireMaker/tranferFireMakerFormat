# Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

from __future__ import division
from __future__ import print_function
from parameter import *
import argparse
import gzip
import os
import sys
import time

import numpy
import random
from six.moves import urllib
from six.moves import xrange  # pylint: disable=redefined-builtin
import tensorflow as tf
from tensorflow.contrib.learn.python.learn.datasets import base


def extract_data(filename, num_images):
  """Extract the images into a 4D tensor [image index, y, x, channels].

  Values are rescaled from [0, 255] down to [-0.5, 0.5].
  """
  print('Extracting', filename)
  # with open(filename) as bytestream:
  #   buf = bytestream.read(IMAGE_SIZE * IMAGE_SIZE * num_images * NUM_CHANNELS)
  #   data = numpy.frombuffer(buf, dtype=numpy.uint8).astype(numpy.float32)
  #   data = data.reshape(num_images, IMAGE_SIZE, IMAGE_SIZE, ORI_NUM_CHANNELS)
  #   return data

  data = numpy.full((num_images, IMAGE_SIZE, IMAGE_SIZE, ORI_NUM_CHANNELS), 0, dtype=numpy.float16)
  label = numpy.full((num_images, 1), 0, dtype=numpy.uint8)
  lines = [None] * num_images
  dimension = IMAGE_SIZE * IMAGE_SIZE
  f = open(filename)
  maxV = 0
  minV = 10
  for k in range(0 , num_images):
    lines[k] = f.readline()
  numpy.random.shuffle(lines)
  for i in range(0 , num_images):
    line = lines[i]
    asc = ord(line[0])
    if asc <= ord('9'):
      label[i] = asc - ord('0')
    else:
      label[i] = asc - ord('a') + 10
    minV = min(minV,label[i])
    maxV = max(maxV,label[i])
    for j in range(0, dimension):
      row = j // IMAGE_SIZE
      column = j % IMAGE_SIZE
      data[i][row][column] = ord(line[2*j+3]) - ord('0')
  f.close()
  print(minV)
  print(maxV)
  return data, label

def write_back(file, data):
  print('Writing', file)
  data = data.ravel()
  f = open(file, "ab")
  f.write(data.tobytes())
  f.close()

def readback(file):
  f = open(file, "rb")
  buf = f.read(28 * 28 * 2 * 3 * 2)
  data = numpy.frombuffer(buf, dtype=numpy.float16)
  print(data)
  print(len(data))
  f.close()

def transformImage_irrelevent(images, labels):
  colored_images = numpy.zeros((images.shape[0], images.shape[1], images.shape[2], 3), dtype=numpy.float16)
  color = numpy.zeros(shape=labels.size, dtype=numpy.uint8)
  charSet = numpy.zeros(shape=labels.size, dtype=numpy.uint8)
  for i in range(images.shape[0]):
    index = random.randint(0,2)
    color[i] = index
    charSet[i] = 0 if (labels[i] <= 9) else 1
    for j in range(images.shape[1]):
      for k in range(images.shape[2]):
        redBase = random.uniform(0, 0.5)
        greenBase = random.uniform(0, 0.5)
        blueBase = random.uniform(0, 0.5)
        colored_images[i][j][k][0] = redBase
        colored_images[i][j][k][1] = greenBase
        colored_images[i][j][k][2] = blueBase
        colored_images[i][j][k][index] += images[i][j][k] * 0.5
  return colored_images, color, charSet

def uniqueCharacter():
  s = open("plain-characters.dat", "r").read()
  print("Unique Characters: {%s}" % ''.join(set(s)))

if __name__ == '__main__':
  data,label = extract_data("data_2task/plain-characters.dat", 40133)
  colored_images, color, charSet = transformImage_irrelevent(data, label)

  write_back("data_2task/image_source.dat", colored_images)
  write_back("data_2task/label_source.dat", label)
  write_back("data_2task/charSet_source.dat", charSet)
  write_back("data_2task/color_source.dat", color)

